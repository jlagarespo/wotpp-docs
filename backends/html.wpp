let ~ ""

let declare_tag(name, tag) !{
	"let " .. name .. "(x) '<" .. tag .. pop attrs(*, *) .. ">' .. x .. '</" .. tag .. ">'"
}

let declare_tag_nl(name, tag) !{
	"let " .. name .. "(x) '<" .. tag .. "' .. pop attrs(*, *) .. '>' .. x .. '</" .. tag .. ">\\n'"
} 

let simple_tag(x)
	declare_tag(x, x)

let simple_tag_nl(x)
	declare_tag_nl(x, x)

let attr(attr, x)
	attr .. "='" .. x .. "'"

let attrs() ~
let attrs(attr) {
	error "no value provided for attribute " .. attr
	~
}

let attrs(attr, x)
	" " .. attr(attr, x) .. pop attrs(*, *)

#[ Document structure ]
simple_tag_nl(\h1)
simple_tag_nl(\h2)
simple_tag_nl(\h3)
simple_tag_nl(\h4)
simple_tag_nl(\h5)
simple_tag_nl(\h6)
simple_tag_nl(\p)

#[ General formatting ]
declare_tag(\i, "em")
declare_tag(\b, "strong")
simple_tag(\sub)
simple_tag(\sup)
simple_tag(\time)


#[ Code stuff ]
declare_tag_nl(\sample, "samp")
simple_tag(\code)
let codeblock(lang, x) {
	"<pre><code>" .. 
	match lang {
		"wpp" -> x #[ TODO: Write a wot++ lexer for pygments, ]
		* -> pipe {"pygmentize -f html -l " .. lang} x
	}
	.. "</code></pre>\n"
}


#[ List ]
simple_tag_nl(\li)

let list() ~
let list(x)
	li(x) .. pop list(*)

let ul()
	"<ul>\n" .. pop list(*) .. "</ul>\n" 

let ol()
	"<ol>\n" .. pop list(*) .. "</ol>\n" 

let hr "<hr>\n"
let br "<br>\n"


#[ Links ]
let link(name, url) "<a href='" .. url .. "'>" .. name .. "</a>"
let img(name, src, alt) "<img src='" .. src .. "' alt='" .. alt .. "'>\n"

#[ Quotes ]
let quote(x, cite) "<blockquote cite='" .. cite .. "'>" .. x .. "</blockquote>\n"
let quote(x) quote(x, "")


#[ Header ]
simple_tag_nl(\head)
simple_tag_nl(\title)
let meta()
	"<meta" .. pop attrs(*, *) .. ">\n"
let hlink()
	"<link" .. pop attrs(*, *) .. ">\n"

r#"<!DOCTYPE html>
<html lang="en" class="no-js">
"#
head(
	meta("charset", "UTF-8") ..
	meta("name", "viewport", "content", "width=device-width") ..
	title(title) ..

	meta("name", "description", "content", description) ..
	meta("property", "og:title", "content", title) ..
	meta("property", "og:description", "content", description) ..
	meta("property", "og:image", "content", "") ..
	meta("property", "og:image:alt", "content", "") ..
	meta("property", "og:type", "content", "website") ..
	meta("property", "og:url", "content", "CHANGEME!!!") ..
	hlink("rel", "canonical", "href", "CHANGEME!!!") ..

	hlink("rel", "icon", "href", "/favicon.ico") ..
	hlink("rel", "icon", "href", "/favicon.svg", "type", "image/svg+xml") ..
	hlink("rel", "stylesheet", "href", "/style/pygments-css/trac.css")
)
r#"<body>
"#
h1(title)

#[ Footer ]
let footer r#"Build time: "# .. time(run "date") .. r#"
</body>
</html>
"#
